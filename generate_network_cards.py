import dill
import pandas as pd
from statsbombpy import sb
from pathlib import Path
from statistics import mean
import network_cards as nc
from tqdm import tqdm

"""
Ensure that the master_dataframe, as generated by 'graph_construction/create_all_graphs.py' is available in the root directory.
"""

with open('master_dataframe.dill', 'rb') as f:
  print('Now loading the master DF. This is a big file -- it might take 5+ minutes!')
  all_matches_graphs = dill.load(f)
print('Master DF loaded succesfully!')

comps = sb.competitions()
fcomps = comps[(~comps.match_available_360.isna()) & (comps.competition_gender == 'male') & (comps.country_name.isin(['International', 'Europe']))]
lookup = {'mid' : [], 'competition' : [], 'match_date' : [], 'match_name' : [], 'competition_stage' : [], 'stadium' : []}


for (i, row) in fcomps.iterrows():
    cid = row['competition_id']
    sid = row['season_id']
    cname = row['competition_name']
    matches = sb.matches(cid,sid)
    for (j, match) in matches.iterrows():
        lookup['mid'].append(match['match_id'])
        lookup['competition'].append(match['competition'])
        lookup['match_date'].append(match['match_date'])
        lookup['match_name'].append(f"{match['home_team']} - {match['away_team']}")
        lookup['competition_stage'].append(f"{match['competition_stage']}")
        lookup['stadium'].append(f"{match['stadium']}")

period_lookup = {1: '1st half (Regulation)', 2: '2nd half (Regulation)', 3: '1st Half (Extra time)', 4: '2nd Half (Extra time)', 5: 'Penalty Shootout'}
match_lookup_df = pd.DataFrame(lookup)


Path("./network_cards").mkdir(parents=True, exist_ok=True)
for (i, row) in tqdm(all_matches_graphs.iterrows(), 'Generating network cards!'):
   mid = row['mid']
   all_passes = row['master_df']
   for (pass_idx, _pass) in all_passes.iterrows():
    mr = match_lookup_df.loc[match_lookup_df.mid == mid].reset_index(drop=True).iloc[0,:]
    passer = _pass.player
    recipient = _pass.pass_recipient
    team = _pass.team
    period = _pass.period
    timestamp = _pass.timestamp
    G = _pass.graphs_fc_with_opps
    n_teammates = sum([1 if G.nodes()[i]['is_teammate'] is True else 0 for i in G.nodes()])
    n_opponents = sum([1 if G.nodes()[i]['is_teammate'] is False else 0 for i in G.nodes()])
    onfield_centroid = (round(mean([G.nodes()[i]['location_x']  for i in G.nodes() if not G.nodes()[i]['is_keeper']]),2)
                        ,round(mean([G.nodes()[i]['location_y'] for i in G.nodes() if not G.nodes()[i]['is_keeper']]),2))
    pass_body_part = _pass.pass_body_part
    pass_length = _pass.pass_length
    pass_angle = _pass.pass_angle
    pass_height = _pass.pass_height
    pass_end_location = _pass.pass_end_location
    card = nc.NetworkCard(G, initialize=False)
    card.update_overall("Name", f"GraphFC: Match {mid} | Pass {pass_idx}")
    card.update_overall("Competition", f"{mr['competition']}")
    card.update_overall("Match", f"{mr['match_name']}")
    card.update_overall("Competition stage", f"{mr['competition_stage']}")
    card.update_overall("Match date", f"{mr['match_date']}")
    card.update_overall("Stadium", f"{mr['stadium']}")
    card.update_overall("Timestamp", f"{timestamp}")
    card.update_overall("Timestamp", f"{timestamp}")
    card.update_overall("Timestamp", f"{timestamp}")
    card.update_overall("Period", f"{int(period)}")
    card.update_overall("Timestamp", f"{timestamp}")



card.update_overall("Team", f"{team}")
card.update_overall("Passer", f"{passer}")
card.update_overall("Recipient", f"{recipient}")
card.update_overall("# Teammates", f"{n_teammates}")
card.update_overall("# Opponents", f"{n_opponents}")
card.update_overall("Nodes are", "Players of either team")
card.update_overall("Links are", "Abstract interactions between players")
card.update_overall("Kind", "Undirected, Featurized")
card.update_overall("Node centroid", f"{onfield_centroid}")

card.update_overall('Pass Body Part', pass_body_part)
card.update_overall('Pass length', f'{round(pass_length, 2)} yards')
card.update_overall('Pass Height', pass_height)
card.update_overall('Pass End Location', pass_end_location)


card.update_metainfo({
    "Node metadata":           "Player's personal space control, Player's (X,Y) coordinates, Team aliegence, Actor & Goalkeeper indicator, Player name, Scaled FIFA vector",
    "Link metadata":           "Team alignment, direct link pitch control, distance between players, pitch control transition homogeniety",
    "Date of creation":        "September 2024",
    "Data generating process": "Capture of brodcast video footage by StatsBomb via https://github.com/statsbomb/statsbombpy",
    "Rights":                   "University of Ljubljana",
    "Citation":                "Stropnik (2024)",
    "Access":                  "https://github.com/wwwidonja/GraphFC"
    })
card.to_latex(f'network_cards/{mid}-{pass_idx}.tex')
      